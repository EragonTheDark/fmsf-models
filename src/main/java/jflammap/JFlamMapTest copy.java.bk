package jflammap;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

//import jflammap.JFlamMapTest;
//import jfarsite.JFarsiteTestThread;
import jflammap.JFlamMapTestThread;


public class JFlamMapTest {
	//You must provide three arguments to this program!
	// landscapePath, inputFilePath, outputPath
	

	public String landScapePath;
	public String inputFilePath;
	public String outputPath;
	
	public static void main(String[] args) 
	{
		CmdMain(args);
		System.exit(0);
	/*	try
		{
			if(args.length < 3)
			{
				System.out.println("JFlamMapTest requires three arguments:\n"
						+ "landscapePath, inputsFilePath, outputPath\n"
						+ "where outputPath is complete path plus base filename for the output, e.g. C:\\output\\test\n");
				return;
			}
			JFlamMapTest test = new JFlamMapTest();
			test.landScapePath = args[0];
			test.inputFilePath = args[1];
			test.outputPath = args[2];
			
			JFlamMapTestThread testThread = new JFlamMapTestThread();
			testThread.landScapePath = test.landScapePath;
			testThread.inputFilePath = test.inputFilePath;
			testThread.start();
			JFlamMapTest test2 = new JFlamMapTest();
			JFlamMapTestThread testThread2 = new JFlamMapTestThread();
			testThread2.landScapePath = test.landScapePath2;
			testThread2.inputFilePath = test.inputFilePath2;
			testThread2.start();
			Thread.sleep(1000);	
			double progress = testThread.flamMap.getFlamMapProgress();// + testThread2.flamMap.getFlamMapProgress();
			while(progress < 1.0)
			{
				Thread.sleep(1000);	
				progress = testThread.flamMap.getFlamMapProgress();// + testThread2.flamMap.getFlamMapProgress();
				System.out.println("FlamMap Progress: "
						+ progress);
			}
			//ok we're done, get the outputs
			
			testThread.flamMap.writeOutputLayer(JFlamMap.FMP_FLAMELENGTH, test.outputPath + "_J_FLAMELENGTH.asc");
			testThread.flamMap.writeOutputLayer(JFlamMap.FMP_SPREADRATE, test.outputPath + "_J_SPREADRATE.asc");
			testThread.flamMap.writeOutputLayer(JFlamMap.FMP_INTENSITY, test.outputPath + "_J_INTENSITY.asc");
			testThread.flamMap.writeOutputLayer(JFlamMap.FMP_HEATAREA, test.outputPath + "_J_HEATAREA.asc");
			testThread.flamMap.writeOutputLayer(JFlamMap.FMP_CROWNSTATE, test.outputPath + "_J_CROWNSTATE.asc");
			testThread.flamMap.writeOutputLayer(JFlamMap.FMP_MIDFLAME, test.outputPath + "_J_MIDFLAME.asc");
			testThread.flamMap.writeOutputLayer(JFlamMap.FMP_HORIZRATE, test.outputPath + "_J_HORIZRATE.asc");
			testThread.flamMap.writeOutputLayer(JFlamMap.FMP_MAXSPREADDIR, test.outputPath + "_J_MAXSPREADDIR.asc");
			testThread.flamMap.writeOutputLayer(JFlamMap.FMP_MAXSPOT_DIR, test.outputPath + "_J_MAXSPOT_DIR.asc");
			testThread.flamMap.writeOutputLayer(JFlamMap.FMP_MAXSPOT_DX, test.outputPath + "_J_MAXSPOT_DX.asc");
			//fuel conditioning output
			testThread.flamMap.writeOutputLayer(JFlamMap.FMP_SOLARRADIATION, test.outputPath + "_J_SOLARRADIATION.asc");
			testThread.flamMap.writeOutputLayer(JFlamMap.FMP_FUELMOISTURE1, test.outputPath + "_J_FUELMOISTURE1.asc");
			testThread.flamMap.writeOutputLayer(JFlamMap.FMP_FUELMOISTURE10, test.outputPath + "_J_FUELMOISTURE10.asc");
			testThread.flamMap.writeOutputLayer(JFlamMap.FMP_FUELMOISTURE100, test.outputPath + "_J_FUELMOISTURE100.asc");
			testThread.flamMap.writeOutputLayer(JFlamMap.FMP_FUELMOISTURE100, test.outputPath + "_J_FUELMOISTURE1000.asc");
			//windninja output
			testThread.flamMap.writeOutputLayer(JFlamMap.FMP_WINDDIRGRID, test.outputPath + "_J_WINDDIRGRID.asc");
			testThread.flamMap.writeOutputLayer(JFlamMap.FMP_WINDSPEEDGRID, test.outputPath + "_J_WINDSPEEDGRID.asc");

			
			/*testThread2.flamMap.writeOutputLayer(JFlamMap.FMP_FLAMELENGTH, test.outputPath2 + "_J_FLAMELENGTH.asc");
			testThread2.flamMap.writeOutputLayer(JFlamMap.FMP_SPREADRATE, test.outputPath2 + "_J_SPREADRATE.asc");
			testThread2.flamMap.writeOutputLayer(JFlamMap.FMP_INTENSITY, test.outputPath2 + "_J_INTENSITY.asc");
			testThread2.flamMap.writeOutputLayer(JFlamMap.FMP_HEATAREA, test.outputPath2 + "_J_HEATAREA.asc");
			testThread2.flamMap.writeOutputLayer(JFlamMap.FMP_CROWNSTATE, test.outputPath2 + "_J_CROWNSTATE.asc");
			testThread2.flamMap.writeOutputLayer(JFlamMap.FMP_MIDFLAME, test.outputPath2 + "_J_MIDFLAME.asc");
			testThread2.flamMap.writeOutputLayer(JFlamMap.FMP_HORIZRATE, test.outputPath2 + "_J_HORIZRATE.asc");
			testThread2.flamMap.writeOutputLayer(JFlamMap.FMP_MAXSPREADDIR, test.outputPath2 + "_J_MAXSPREADDIR.asc");
			testThread2.flamMap.writeOutputLayer(JFlamMap.FMP_MAXSPOT_DIR, test.outputPath2 + "_J_MAXSPOT_DIR.asc");
			testThread2.flamMap.writeOutputLayer(JFlamMap.FMP_MAXSPOT_DX, test.outputPath2 + "_J_MAXSPOT_DX.asc");
			//fuel conditioning output
			testThread2.flamMap.writeOutputLayer(JFlamMap.FMP_SOLARRADIATION, test.outputPath2 + "_J_SOLARRADIATION.asc");
			testThread2.flamMap.writeOutputLayer(JFlamMap.FMP_FUELMOISTURE1, test.outputPath2 + "_J_FUELMOISTURE1.asc");
			testThread2.flamMap.writeOutputLayer(JFlamMap.FMP_FUELMOISTURE10, test.outputPath2 + "_J_FUELMOISTURE10.asc");
			testThread2.flamMap.writeOutputLayer(JFlamMap.FMP_FUELMOISTURE100, test.outputPath2 + "_J_FUELMOISTURE100.asc");
			testThread2.flamMap.writeOutputLayer(JFlamMap.FMP_FUELMOISTURE100, test.outputPath2 + "_J_FUELMOISTURE1000.asc");
			//windninja output
			testThread2.flamMap.writeOutputLayer(JFlamMap.FMP_WINDDIRGRID, test.outputPath2 + "_J_WINDDIRGRID.asc");
			testThread2.flamMap.writeOutputLayer(JFlamMap.FMP_WINDSPEEDGRID, test.outputPath2 + "_J_WINDSPEEDGRID.asc");
		
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}*/
	}

	public static void CmdMain(String[] args) 
	{
		 
		int iftdssIDs[] = new int[18];
		iftdssIDs[0] = JFlamMap.FMP_FLAMELENGTH;
		iftdssIDs[1] = JFlamMap.FMP_SPREADRATE;
		iftdssIDs[2] = JFlamMap.FMP_INTENSITY;
		iftdssIDs[3] = JFlamMap.FMP_HEATAREA;
		iftdssIDs[4] = JFlamMap.FMP_CROWNSTATE;
		iftdssIDs[5] = JFlamMap.FMP_MIDFLAME;
		iftdssIDs[6] = JFlamMap.FMP_HORIZRATE;
		iftdssIDs[7] = JFlamMap.FMP_MAXSPREADDIR;
		iftdssIDs[8] = JFlamMap.FMP_MAXSPOT_DIR;
		iftdssIDs[9] = JFlamMap.FMP_MAXSPOT_DX;
		iftdssIDs[10] = JFlamMap.FMP_CROWNFRACTIONBURNED;
		iftdssIDs[11] = JFlamMap.FMP_WINDDIRGRID;
		iftdssIDs[12] = JFlamMap.FMP_WINDSPEEDGRID;
		iftdssIDs[13] = JFlamMap.FMP_SOLARRADIATION;
		iftdssIDs[14] = JFlamMap.FMP_FUELMOISTURE1;
		iftdssIDs[15] = JFlamMap.FMP_FUELMOISTURE10;
		iftdssIDs[16] = JFlamMap.FMP_FUELMOISTURE100;
		iftdssIDs[17] = JFlamMap.FMP_FUELMOISTURE1000;
		BufferedReader csv = null;
		try
		{
			csv = new BufferedReader(new FileReader(args[0]));
			String l;
			int nLines = 0;
			l = csv.readLine();
			nLines = Integer.parseInt(l);
			JFlamMapTest test[] = new JFlamMapTest[nLines];
			JFlamMapTestThread testThread[] = new JFlamMapTestThread[nLines];
			int loc = 0;
			//while ((l = csv.readLine()) != null) 
			for(int f = 0; loc < nLines; f++)
			{
				if((l = csv.readLine()) != null)
				{
					String[] cmdStr = l.split(" ", 5);
					test[loc] = new JFlamMapTest();
					test[loc].landScapePath = cmdStr[0];
					test[loc].inputFilePath = cmdStr[1];
					//test[loc].ignitionPath = cmdStr[2];
					//test[loc].barrierPath = cmdStr[3];
					test[loc].outputPath = cmdStr[2];
					//testThread.landScapePath = test.landScapePath;
					//testThread.inputFilePath = test.inputFilePath;
					testThread[loc] = new JFlamMapTestThread();
					testThread[loc].landScapePath = test[loc].landScapePath;
					testThread[loc].inputFilePath = test[loc].inputFilePath;
					testThread[loc].startProc = loc;
					testThread[loc].numProcs = 1;
					testThread[loc].start();
					loc++;
				}
			}
			
			//loop thru checking progress so we know we're done with all threads
			for(loc = 0; loc < nLines; loc++)
			{
				Thread.sleep(1000);	
				
				double progress = testThread[loc].flamMap.getFlamMapProgress();// + testThread2.farsite.getFarsiteProgress();
				while(progress < 1.0)
				{
					Thread.sleep(1000);	
					progress = testThread[loc].flamMap.getFlamMapProgress();// + testThread2.farsite.getFarsiteProgress();
					System.out.println("FlamMap " + loc + " Progress: "
						+ progress);
				}
			}
			
			//write all the outputs
			int err;
			for(loc = 0; loc < nLines; loc++)
			{
				testThread[loc].flamMap.writeOutputLayer(JFlamMap.FMP_FLAMELENGTH, test[loc].outputPath + "_J_FLAMELENGTH.asc");
				testThread[loc].flamMap.writeOutputLayer(JFlamMap.FMP_SPREADRATE, test[loc].outputPath + "_J_SPREADRATE.asc");
				testThread[loc].flamMap.writeOutputLayer(JFlamMap.FMP_INTENSITY, test[loc].outputPath + "_J_INTENSITY.asc");
				testThread[loc].flamMap.writeOutputLayer(JFlamMap.FMP_HEATAREA, test[loc].outputPath + "_J_HEATAREA.asc");
				testThread[loc].flamMap.writeOutputLayer(JFlamMap.FMP_CROWNSTATE, test[loc].outputPath + "_J_CROWNSTATE.asc");
				testThread[loc].flamMap.writeOutputLayer(JFlamMap.FMP_MIDFLAME, test[loc].outputPath + "_J_MIDFLAME.asc");
				testThread[loc].flamMap.writeOutputLayer(JFlamMap.FMP_HORIZRATE, test[loc].outputPath + "_J_HORIZRATE.asc");
				testThread[loc].flamMap.writeOutputLayer(JFlamMap.FMP_MAXSPREADDIR, test[loc].outputPath + "_J_MAXSPREADDIR.asc");
				testThread[loc].flamMap.writeOutputLayer(JFlamMap.FMP_MAXSPOT_DIR, test[loc].outputPath + "_J_MAXSPOT_DIR.asc");
				testThread[loc].flamMap.writeOutputLayer(JFlamMap.FMP_MAXSPOT_DX, test[loc].outputPath + "_J_MAXSPOT_DX.asc");
				//fuel conditioning output
				testThread[loc].flamMap.writeOutputLayer(JFlamMap.FMP_SOLARRADIATION, test[loc].outputPath + "_J_SOLARRADIATION.asc");
				testThread[loc].flamMap.writeOutputLayer(JFlamMap.FMP_FUELMOISTURE1, test[loc].outputPath + "_J_FUELMOISTURE1.asc");
				testThread[loc].flamMap.writeOutputLayer(JFlamMap.FMP_FUELMOISTURE10, test[loc].outputPath + "_J_FUELMOISTURE10.asc");
				testThread[loc].flamMap.writeOutputLayer(JFlamMap.FMP_FUELMOISTURE100, test[loc].outputPath + "_J_FUELMOISTURE100.asc");
				testThread[loc].flamMap.writeOutputLayer(JFlamMap.FMP_FUELMOISTURE1000, test[loc].outputPath + "_J_FUELMOISTURE1000.asc");
				//windninja output
				testThread[loc].flamMap.writeOutputLayer(JFlamMap.FMP_WINDDIRGRID, test[loc].outputPath + "_J_WINDDIRGRID.asc");
				testThread[loc].flamMap.writeOutputLayer(JFlamMap.FMP_WINDSPEEDGRID, test[loc].outputPath + "_J_WINDSPEEDGRID.asc");
				//kml output
				err = testThread[loc].flamMap.writeWindVectorKML(test[loc].outputPath + "_J_WINDVECTORS.kml", 180.0);
				if(err != 1)
				{
					System.out.println("FlamMap " + loc + " Error: "
							+ testThread[loc].flamMap.getErrorMessage(err) + " for " + test[loc].outputPath + "_J_WINDVECTORS.kml");
				}
				System.out.println("FlamMap " + loc + " WindVectorKML Resolution: " + testThread[loc].flamMap.getWindVectorKMLResolution());
				testThread[loc].flamMap.writeOutputLayerGeotiff(JFlamMap.FMP_FLAMELENGTH, test[loc].outputPath + "_J_FLAMELENGTH.tif");
				testThread[loc].flamMap.writeOutputLayerGeotiff(JFlamMap.FMP_SPREADRATE, test[loc].outputPath + "_J_SPREADRATE.tif");
				testThread[loc].flamMap.writeOutputLayerGeotiff(JFlamMap.FMP_INTENSITY, test[loc].outputPath + "_J_INTENSITY.tif");
				testThread[loc].flamMap.writeOutputLayerGeotiff(JFlamMap.FMP_HEATAREA, test[loc].outputPath + "_J_HEATAREA.tif");
				testThread[loc].flamMap.writeOutputLayerGeotiff(JFlamMap.FMP_CROWNSTATE, test[loc].outputPath + "_J_CROWNSTATE.tif");
				testThread[loc].flamMap.writeOutputLayerGeotiff(JFlamMap.FMP_MIDFLAME, test[loc].outputPath + "_J_MIDFLAME.tif");
				testThread[loc].flamMap.writeOutputLayerGeotiff(JFlamMap.FMP_HORIZRATE, test[loc].outputPath + "_J_HORIZRATE.tif");
				testThread[loc].flamMap.writeOutputLayerGeotiff(JFlamMap.FMP_MAXSPREADDIR, test[loc].outputPath + "_J_MAXSPREADDIR.tif");
				testThread[loc].flamMap.writeOutputLayerGeotiff(JFlamMap.FMP_MAXSPOT_DIR, test[loc].outputPath + "_J_MAXSPOT_DIR.tif");
				testThread[loc].flamMap.writeOutputLayerGeotiff(JFlamMap.FMP_MAXSPOT_DX, test[loc].outputPath + "_J_MAXSPOT_DX.tif");
				testThread[loc].flamMap.writeOutputLayerGeotiff(JFlamMap.FMP_CROWNFRACTIONBURNED, test[loc].outputPath + "_J_CROWNFACTIONBURNED.tif");
				//fuel conditioning output
				testThread[loc].flamMap.writeOutputLayerGeotiff(JFlamMap.FMP_SOLARRADIATION, test[loc].outputPath + "_J_SOLARRADIATION.tif");
				testThread[loc].flamMap.writeOutputLayerGeotiff(JFlamMap.FMP_FUELMOISTURE1, test[loc].outputPath + "_J_FUELMOISTURE1.tif");
				testThread[loc].flamMap.writeOutputLayerGeotiff(JFlamMap.FMP_FUELMOISTURE10, test[loc].outputPath + "_J_FUELMOISTURE10.tif");
				testThread[loc].flamMap.writeOutputLayerGeotiff(JFlamMap.FMP_FUELMOISTURE100, test[loc].outputPath + "_J_FUELMOISTURE100.tif");
				testThread[loc].flamMap.writeOutputLayerGeotiff(JFlamMap.FMP_FUELMOISTURE1000, test[loc].outputPath + "_J_FUELMOISTURE1000.tif");
				//windninja output
				testThread[loc].flamMap.writeOutputLayerGeotiff(JFlamMap.FMP_WINDDIRGRID, test[loc].outputPath + "_J_WINDDIRGRID.tif");
				testThread[loc].flamMap.writeOutputLayerGeotiff(JFlamMap.FMP_WINDSPEEDGRID, test[loc].outputPath + "_J_WINDSPEEDGRID.tif");
				//everything in a GeoTIFF
				testThread[loc].flamMap.writeAllOutputLayersGeotiff(test[loc].outputPath + "_J_FlamMapALL.tif");
				testThread[loc].flamMap.writeOutputLayersGeotiff(iftdssIDs, test[loc].outputPath + "_J_FlamMapALLbyIds.tif");
			}
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		finally
		{
			try	// Close the input stream
			{
				if (csv != null)
				{
					csv.close();
				}
				System.out.println("JFlamMapTest complete");

			}
			catch (IOException ioExc) {}
		}
			
	}

}
